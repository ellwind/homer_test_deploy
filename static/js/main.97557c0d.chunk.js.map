{"version":3,"sources":["components/add-content-button/add-content-button.component.jsx","components/menu-item/menu-item.component.jsx","components/add-note/add-note.component.jsx","components/note/note.component.jsx","App.js","serviceWorker.js","index.js"],"names":["AddContentButton","className","onClick","this","props","toggleMenu","src","Component","MenuItemComponent","handler","menuClicked","icon","name","AddNoteComponent","state","title","note","colorPickerToggled","colorsList","value","color","setData","e","setState","target","onSubmit","preventDefault","data","onAddNote","openColorPicker","isColorPickerToggled","renderColorsList","filter","map","key","setColor","onChange","placeholder","style","type","NoteComponent","App","menuToggled","addNoteToggled","menuItems","addNoteToggle","notes","handleMenuClick","isMenuToggled","isAddNoteToggled","setMenuRef","node","menuRef","setAddButtonRef","addButtonRef","addNote","id","length","unshift","renderNotes","Fragment","document","addEventListener","checkClickOutside","bind","removeEventListener","item","contains","ref","renderMenuItems","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.97557c0d.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport './add-content-button.component.css';\r\n\r\nclass AddContentButton extends Component {\r\n    render() {\r\n        return (\r\n            <button className='add-content-button' onClick={this.props.toggleMenu}>\r\n                <span className='add-content-button__add-sign'><img src='../assets/add.svg'/></span>\r\n                <span>\r\n                    Add any content\r\n                </span>\r\n            </button>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddContentButton;\r\n","import React, {Component} from 'react';\r\nimport './menu-item.component.css';\r\n\r\nclass MenuItemComponent extends Component {\r\n    handler = () => {\r\n        this.props.menuClicked(this.props.handler);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='menu-item' onClick={this.handler}>\r\n                <img src={this.props.icon} />\r\n                <p>{this.props.name}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuItemComponent;\r\n","import React, {Component} from 'react';\r\nimport TextareaAutosize from 'react-textarea-autosize';\r\n\r\nimport './add-note.component.css';\r\n\r\nclass AddNoteComponent extends Component {\r\n\r\n    state = {\r\n        title: '',\r\n        note: '',\r\n        colorPickerToggled: false,\r\n        colorsList: [\r\n            {name: 'text-color-black.svg', value: '#000000'},\r\n            {name: 'text-color-orange.svg', value: '#F5A623'},\r\n            {name: 'text-color-blue.svg', value: '#007AFF'},\r\n            {name: 'text-color-green.svg', value: '#00BE7C'},\r\n            {name: 'text-color-red.svg', value: '#D52842'}\r\n        ],\r\n        color: {},\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({color: this.state.colorsList[0]})\r\n    }\r\n\r\n    setData = (e) => {\r\n        this.setState({[e.target.name]: e.target.value});\r\n    };\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const data = {\r\n          title: this.state.title,\r\n          note: this.state.note,\r\n          color: this.state.color.value\r\n        };\r\n        this.props.onAddNote(data);\r\n        this.setState({title: '', note: '', color: this.state.colorsList[0]});\r\n    };\r\n\r\n    openColorPicker = () => {\r\n        this.setState({colorPickerToggled: !this.state.colorPickerToggled});\r\n    };\r\n\r\n    isColorPickerToggled = () => {\r\n        return this.state.colorPickerToggled ? 'show' : 'hidden';\r\n    };\r\n\r\n    renderColorsList = () => {\r\n        const colors = this.state.colorsList.filter(color => color.value !== this.state.color.value);\r\n        return colors.map(color => (\r\n            <img src={'assets/colors/' + color.name} key={color.value} onClick={() => this.setColor(color)}/>\r\n        ));\r\n    };\r\n\r\n    setColor = (color) => {\r\n        this.setState({color, colorPickerToggled: false});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='add-note'>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <input onChange={this.setData} name='title' value={this.state.title} className='add-note__title' placeholder='Add title'/>\r\n                    <TextareaAutosize onChange={this.setData} name='note' value={this.state.note} className='add-note__note' placeholder='Add note' style={{color: this.state.color.value}}/>\r\n                    <div className='add-note__color-wrapper'>\r\n                        <div className={'add-note__color-picker ' + this.isColorPickerToggled()}>\r\n                            {this.renderColorsList()}\r\n                        </div>\r\n                        <span className='add-note__selected-color' onClick={this.openColorPicker}>\r\n                            <img src={'assets/colors/' + this.state.color.name} />\r\n                        </span>\r\n                    </div>\r\n                    <button className='add-note__submit' type='submit'>Done</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNoteComponent;\r\n","import React, {Component} from 'react';\r\nimport './note.component.css';\r\n\r\nclass NoteComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className='note-item'>\r\n                <h2>{this.props.note.title}</h2>\r\n                <p style={{color: this.props.note.color}}>{this.props.note.note}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NoteComponent;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport AddContentButton from \"./components/add-content-button/add-content-button.component\";\nimport MenuItemComponent from \"./components/menu-item/menu-item.component\";\nimport AddNoteComponent from \"./components/add-note/add-note.component\";\nimport NoteComponent from \"./components/note/note.component\";\n\nclass App extends Component {\n  state = {\n    menuToggled: false,\n    addNoteToggled: false,\n    menuItems: [\n      {name: 'Note', icon: 'assets/icon-note.svg', handler: () => {this.addNoteToggle()}},\n      {name: 'Images', icon: 'assets/icon-brand.svg'},\n      {name: 'Document', icon: 'assets/icon-document.svg'},\n      {name: 'Link', icon: 'assets/icon-link.svg'},\n      {name: 'Video', icon: 'assets/video.svg'},\n    ],\n    notes: []\n  };\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.checkClickOutside.bind(this));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.checkClickOutside.bind(this));\n  }\n\n  renderMenuItems() {\n    return this.state.menuItems.map(item => (\n        <React.Fragment key={item.name}>\n          <MenuItemComponent icon={item.icon} name={item.name} handler={item.handler} menuClicked={this.handleMenuClick}></MenuItemComponent>\n        </React.Fragment>\n    ));\n  }\n\n  menuToggled = () => {\n    this.setState({menuToggled: !this.state.menuToggled})\n  };\n\n  handleMenuClick =(handler) => {\n    if (handler) {\n      handler();\n    }\n  };\n\n  addNoteToggle = () => {\n    this.setState({addNoteToggled: true, menuToggled: false});\n  };\n\n  isMenuToggled = () => {\n    return this.state.menuToggled ? 'show' : 'hidden';\n  };\n\n  isAddNoteToggled = () => {\n    return this.state.addNoteToggled ? 'show' : 'hidden';\n  };\n\n  setMenuRef = (node) => {\n    this.menuRef = node;\n  };\n\n  setAddButtonRef = (node) => {\n    this.addButtonRef = node;\n  };\n\n  checkClickOutside(e) {\n    if (this.menuRef && this.addButtonRef && !this.menuRef.contains(e.target) && !this.addButtonRef.contains(e.target)) {\n      this.setState({menuToggled: false});\n    }\n  }\n\n  addNote = (note) => {\n    const notes = this.state.notes;\n    note.id = this.state.notes.length;\n    notes.unshift(note);\n    this.setState({notes, addNoteToggled: false});\n  };\n\n  renderNotes = () => {\n    return this.state.notes.map(note => (\n        <React.Fragment key={note.id}>\n          <NoteComponent note={note}></NoteComponent>\n        </React.Fragment>\n    ));\n  };\n\n  render() {\n    return (\n        <div className='app'>\n          <div className='side-menu'>\n            <div ref={this.setAddButtonRef}>\n              <AddContentButton toggleMenu={this.menuToggled} ref={this.setAddButtonRef}></AddContentButton>\n            </div>\n            <div className={'menu ' + this.isMenuToggled()} ref={this.setMenuRef}>\n              {this.renderMenuItems()}\n            </div>\n          </div>\n          <div className='notes-container'>\n            <div className={'add-note-container ' + this.isAddNoteToggled()}>\n              <AddNoteComponent onAddNote={this.addNote}></AddNoteComponent>\n            </div>\n            <div className='notes-list'>\n              {this.renderNotes()}\n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}